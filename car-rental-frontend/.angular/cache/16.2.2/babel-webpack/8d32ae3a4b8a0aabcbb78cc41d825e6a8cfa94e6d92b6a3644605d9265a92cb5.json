{"ast":null,"code":"import { Injectable, EventEmitter, Component, ViewEncapsulation, ChangeDetectorRef, Inject, PLATFORM_ID, ElementRef, ViewChild, Input, Output, HostListener, NgModule } from '@angular/core';\nimport { isPlatformBrowser, DOCUMENT, CommonModule } from '@angular/common';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/ng-image-slider.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst DESC = 'DESC';\n/** @type {?} */\nconst ASC = 'ASC';\nclass NgImageSliderService {\n  constructor() {}\n  /**\n   * @param {?} str\n   * @return {?}\n   */\n  isBase64(str) {\n    /** @type {?} */\n    var base64regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\n    return base64regex.test(str);\n  }\n  /**\n   * @param {?} str\n   * @return {?}\n   */\n  base64FileExtension(str) {\n    return str.substring(\"data:image/\".length, str.indexOf(\";base64\"));\n  }\n  /**\n   * @param {?=} arr\n   * @param {?=} orderType\n   * @return {?}\n   */\n  orderArray(arr = [], orderType = ASC) {\n    if ((arr === null || arr === void 0 ? void 0 : arr.length) && orderType) {\n      return arr.sort(\n      /**\n      * @param {?} ob1\n      * @param {?} ob2\n      * @return {?}\n      */\n      (ob1, ob2) => {\n        if (ob1['order'] === null || !ob1['order']) {\n          return 1;\n        } else if (ob2['order'] === null || !ob2['order']) {\n          return -1;\n        } else if (ob1['order'] > ob2['order']) {\n          if (orderType === DESC) {\n            return -1;\n          } else {\n            return 1;\n          }\n        } else if (ob1['order'] < ob2['order']) {\n          if (orderType === DESC) {\n            return 1;\n          } else {\n            return -1;\n          }\n        }\n      });\n    }\n    return arr;\n  }\n}\n\n/** @nocollapse */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/ng-image-slider.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst NEXT_ARROW_CLICK_MESSAGE = 'next';\n/** @type {?} */\nconst PREV_ARROW_CLICK_MESSAGE = 'previous';\nclass NgImageSliderComponent {\n  /**\n   * @param {?} cdRef\n   * @param {?} platformId\n   * @param {?} imageSliderService\n   * @param {?} elRef\n   */\n  constructor(cdRef, platformId, imageSliderService, elRef\n  // @Inject(ElementRef) private _elementRef: ElementRef\n  ) {\n    this.cdRef = cdRef;\n    this.platformId = platformId;\n    this.imageSliderService = imageSliderService;\n    this.elRef = elRef;\n    // for slider\n    this.sliderMainDivWidth = 0;\n    this.imageParentDivWidth = 0;\n    this.imageObj = [];\n    this.ligthboxImageObj = [];\n    this.totalImages = 0;\n    this.leftPos = 0;\n    this.effectStyle = 'all 1s ease-in-out';\n    this.speed = 1; // default speed in second\n    // default speed in second\n    this.sliderPrevDisable = false;\n    this.sliderNextDisable = false;\n    this.slideImageCount = 1;\n    this.sliderImageWidth = 205;\n    this.sliderImageReceivedWidth = 205;\n    this.sliderImageHeight = 200;\n    this.sliderImageReceivedHeight = 205;\n    this.sliderImageSizeWithPadding = 211;\n    this.autoSlideCount = 0;\n    this.stopSlideOnHover = true;\n    this.showArrowButton = true;\n    this.textDirection = 'ltr';\n    this.imageMargin = 3;\n    this.sliderOrderType = 'ASC';\n    // for lightbox\n    this.ligthboxShow = false;\n    this.activeImageIndex = -1;\n    this.visiableImageIndex = 0;\n    this.infinite = false;\n    this.imagePopup = true;\n    this.images = [];\n    this.videoAutoPlay = false;\n    this.paginationShow = false;\n    this.arrowKeyMove = true;\n    this.manageImageRatio = false;\n    this.showVideoControls = true;\n    this.lazyLoading = false;\n    // @Outputs\n    this.imageClick = new EventEmitter();\n    this.arrowClick = new EventEmitter();\n    this.lightboxArrowClick = new EventEmitter();\n    this.lightboxClose = new EventEmitter();\n  }\n  // @inputs\n  /**\n   * @param {?} data\n   * @return {?}\n   */\n  set imageSize(data) {\n    if (data && typeof data === 'object') {\n      if (data.hasOwnProperty('space') && typeof data['space'] === 'number' && data['space'] > -1) {\n        this.imageMargin = data['space'];\n      }\n      if (data.hasOwnProperty('width') && (typeof data['width'] === 'number' || typeof data['width'] === 'string')) {\n        this.sliderImageReceivedWidth = data['width'];\n        // this.sliderImageSizeWithPadding = data['width'] + (this.imageMargin * 2); // addeing padding with image width\n      }\n\n      if (data.hasOwnProperty('height') && (typeof data['height'] === 'number' || typeof data['height'] === 'string')) {\n        this.sliderImageReceivedHeight = data['height'];\n      }\n    }\n  }\n  /**\n   * @param {?} dir\n   * @return {?}\n   */\n  set direction(dir) {\n    if (dir) {\n      this.textDirection = dir;\n    }\n  }\n  /**\n   * @param {?} data\n   * @return {?}\n   */\n  set animationSpeed(data) {\n    if (data && typeof data === 'number' && data >= 0.1 && data <= 5) {\n      this.speed = data;\n      this.effectStyle = `all ${this.speed}s ease-in-out`;\n    }\n  }\n  /**\n   * @param {?} count\n   * @return {?}\n   */\n  set slideImage(count) {\n    if (count && typeof count === 'number') {\n      this.slideImageCount = Math.round(count);\n    }\n  }\n  /**\n   * @param {?} count\n   * @return {?}\n   */\n  set autoSlide(count) {\n    if (count && (typeof count === 'number' || typeof count === 'boolean' || typeof count === 'object')) {\n      if (typeof count === 'number' && count >= 1 && count <= 5) {\n        count = Math.round(count);\n      } else if (typeof count === 'boolean') {\n        count = 1;\n      } else if (typeof count === 'object' && count.hasOwnProperty('interval') && Math.round(count['interval']) && Math.round(count['interval']) >= 1 && Math.round(count['interval']) <= 5) {\n        this.stopSlideOnHover = count.hasOwnProperty('stopOnHover') ? count['stopOnHover'] : true;\n        count = Math.round(count['interval']);\n      }\n      this.autoSlideCount = count * 1000;\n    }\n  }\n  /**\n   * @param {?} flag\n   * @return {?}\n   */\n  set showArrow(flag) {\n    if (flag !== undefined && typeof flag === 'boolean') {\n      this.showArrowButton = flag;\n    }\n  }\n  /**\n   * @param {?} data\n   * @return {?}\n   */\n  set orderType(data) {\n    if (data !== undefined && typeof data === 'string') {\n      this.sliderOrderType = data.toUpperCase();\n    }\n  }\n  /**\n   * @param {?} activeIndex\n   * @return {?}\n   */\n  set defaultActiveImage(activeIndex) {\n    if (typeof activeIndex === 'number' && activeIndex > -1) {\n      this.activeImageIndex = activeIndex;\n    }\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  onResize(event) {\n    this.setSliderWidth();\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  handleKeyboardEvent(event) {\n    if (event && event.key) {\n      if (event.key.toLowerCase() === 'arrowright' && !this.ligthboxShow && this.arrowKeyMove) {\n        this.next();\n      }\n      if (event.key.toLowerCase() === 'arrowleft' && !this.ligthboxShow && this.arrowKeyMove) {\n        this.prev();\n      }\n      if (event.key.toLowerCase() === 'escape' && this.ligthboxShow) {\n        this.close();\n      }\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    // @TODO: for future use\n    // console.log(this._elementRef)\n    // for slider\n    if (this.infinite) {\n      this.effectStyle = 'none';\n      this.leftPos = -1 * this.sliderImageSizeWithPadding * this.slideImageCount;\n      for (let i = 1; i <= this.slideImageCount; i++) {\n        this.imageObj.unshift(this.imageObj[this.imageObj.length - i]);\n      }\n    }\n  }\n  // for slider\n  /**\n   * @return {?}\n   */\n  ngAfterViewInit() {\n    this.setSliderWidth();\n    this.cdRef.detectChanges();\n    if (isPlatformBrowser(this.platformId)) {\n      this.imageAutoSlide();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    if (this.autoSlideInterval) {\n      clearInterval(this.autoSlideInterval);\n    }\n    if (this.ligthboxShow === true) {\n      this.close();\n    }\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n  ngOnChanges(changes) {\n    if (changes.images && changes.images.hasOwnProperty('previousValue') && changes.images.hasOwnProperty('currentValue') && changes.images.previousValue != changes.images.currentValue) {\n      this.setSliderImages(changes.images.currentValue);\n    }\n    if (changes && changes.imageSize) {\n      /** @type {?} */\n      const size = changes.imageSize;\n      if (size && size.previousValue && size.currentValue && size.previousValue.width && size.previousValue.height && size.currentValue.width && size.currentValue.height && (size.previousValue.width !== size.currentValue.width || size.previousValue.height !== size.currentValue.height)) {\n        this.setSliderWidth();\n      }\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngDoCheck() {\n    if (this.images && this.ligthboxImageObj && this.images.length !== this.ligthboxImageObj.length) {\n      this.setSliderImages(this.images);\n    }\n  }\n  /**\n   * @param {?} imgObj\n   * @return {?}\n   */\n  setSliderImages(imgObj) {\n    if (imgObj && imgObj instanceof Array && imgObj.length) {\n      /** @type {?} */\n      const sliderOrderEnable = imgObj.find(\n      /**\n      * @param {?} img\n      * @return {?}\n      */\n      img => {\n        if (img.hasOwnProperty('order')) {\n          return true;\n        }\n      });\n      if (sliderOrderEnable) {\n        imgObj = this.imageSliderService.orderArray(imgObj, this.sliderOrderType.toUpperCase());\n      }\n      this.imageObj = imgObj.map(\n      /**\n      * @param {?} img\n      * @param {?} index\n      * @return {?}\n      */\n      (img, index) => {\n        img['index'] = index;\n        return img;\n      });\n      this.ligthboxImageObj = [...this.imageObj];\n      this.totalImages = this.imageObj.length;\n      // this.imageParentDivWidth = imgObj.length * this.sliderImageSizeWithPadding;\n      this.setSliderWidth();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  setSliderWidth() {\n    if (this.sliderMain && this.sliderMain.nativeElement && this.sliderMain.nativeElement.offsetWidth) {\n      this.sliderMainDivWidth = this.sliderMain.nativeElement.offsetWidth;\n    }\n    if (this.sliderMainDivWidth && this.sliderImageReceivedWidth) {\n      if (typeof this.sliderImageReceivedWidth === 'number') {\n        this.sliderImageWidth = this.sliderImageReceivedWidth;\n      } else if (typeof this.sliderImageReceivedWidth === 'string') {\n        if (this.sliderImageReceivedWidth.indexOf('px') >= 0) {\n          this.sliderImageWidth = parseFloat(this.sliderImageReceivedWidth);\n        } else if (this.sliderImageReceivedWidth.indexOf('%') >= 0) {\n          this.sliderImageWidth = +(this.sliderMainDivWidth * parseFloat(this.sliderImageReceivedWidth) / 100).toFixed(2);\n        } else if (parseFloat(this.sliderImageReceivedWidth)) {\n          this.sliderImageWidth = parseFloat(this.sliderImageReceivedWidth);\n        }\n      }\n    }\n    if (window && window.innerHeight && this.sliderImageReceivedHeight) {\n      if (typeof this.sliderImageReceivedHeight === 'number') {\n        this.sliderImageHeight = this.sliderImageReceivedHeight;\n      } else if (typeof this.sliderImageReceivedHeight === 'string') {\n        if (this.sliderImageReceivedHeight.indexOf('px') >= 0) {\n          this.sliderImageHeight = parseFloat(this.sliderImageReceivedHeight);\n        } else if (this.sliderImageReceivedHeight.indexOf('%') >= 0) {\n          this.sliderImageHeight = +(window.innerHeight * parseFloat(this.sliderImageReceivedHeight) / 100).toFixed(2);\n        } else if (parseFloat(this.sliderImageReceivedHeight)) {\n          this.sliderImageHeight = parseFloat(this.sliderImageReceivedHeight);\n        }\n      }\n    }\n    this.sliderImageSizeWithPadding = this.sliderImageWidth + this.imageMargin * 2;\n    this.imageParentDivWidth = this.imageObj.length * this.sliderImageSizeWithPadding;\n    if (this.imageDiv && this.imageDiv.nativeElement && this.imageDiv.nativeElement.offsetWidth) {\n      this.leftPos = this.infinite ? -1 * this.sliderImageSizeWithPadding * this.slideImageCount : 0;\n    }\n    this.nextPrevSliderButtonDisable();\n  }\n  /**\n   * @param {?} index\n   * @return {?}\n   */\n  imageOnClick(index) {\n    this.activeImageIndex = index;\n    if (this.imagePopup) {\n      this.showLightbox();\n    }\n    this.imageClick.emit(index);\n  }\n  /**\n   * @return {?}\n   */\n  imageAutoSlide() {\n    if (this.infinite && this.autoSlideCount && !this.ligthboxShow) {\n      this.autoSlideInterval = setInterval(\n      /**\n      * @return {?}\n      */\n      () => {\n        this.next();\n      }, this.autoSlideCount);\n    }\n  }\n  /**\n   * @return {?}\n   */\n  imageMouseEnterHandler() {\n    if (this.infinite && this.autoSlideCount && this.autoSlideInterval) {\n      clearInterval(this.autoSlideInterval);\n    }\n  }\n  /**\n   * @return {?}\n   */\n  prev() {\n    if (!this.sliderPrevDisable) {\n      if (this.infinite) {\n        this.infinitePrevImg();\n      } else {\n        this.prevImg();\n      }\n      //this.arrowClick.emit(PREV_ARROW_CLICK_MESSAGE);\n      this.sliderArrowDisableTeam(PREV_ARROW_CLICK_MESSAGE);\n      this.getVisiableIndex();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  next() {\n    if (!this.sliderNextDisable) {\n      if (this.infinite) {\n        this.infiniteNextImg();\n      } else {\n        this.nextImg();\n      }\n      //this.arrowClick.emit(NEXT_ARROW_CLICK_MESSAGE);\n      this.sliderArrowDisableTeam(NEXT_ARROW_CLICK_MESSAGE);\n      this.getVisiableIndex();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  prevImg() {\n    if (0 >= this.leftPos + this.sliderImageSizeWithPadding * this.slideImageCount) {\n      this.leftPos += this.sliderImageSizeWithPadding * this.slideImageCount;\n    } else {\n      this.leftPos = 0;\n    }\n  }\n  /**\n   * @return {?}\n   */\n  nextImg() {\n    if (this.imageParentDivWidth + this.leftPos - this.sliderMainDivWidth > this.sliderImageSizeWithPadding * this.slideImageCount) {\n      this.leftPos -= this.sliderImageSizeWithPadding * this.slideImageCount;\n    } else if (this.imageParentDivWidth + this.leftPos - this.sliderMainDivWidth > 0) {\n      this.leftPos -= this.imageParentDivWidth + this.leftPos - this.sliderMainDivWidth;\n    }\n  }\n  /**\n   * @return {?}\n   */\n  infinitePrevImg() {\n    this.effectStyle = `all ${this.speed}s ease-in-out`;\n    this.leftPos = 0;\n    setTimeout(\n    /**\n    * @return {?}\n    */\n    () => {\n      this.effectStyle = 'none';\n      this.leftPos = -1 * this.sliderImageSizeWithPadding * this.slideImageCount;\n      for (let i = 0; i < this.slideImageCount; i++) {\n        this.imageObj.unshift(this.imageObj[this.imageObj.length - this.slideImageCount - 1]);\n        this.imageObj.pop();\n      }\n    }, this.speed * 1000);\n  }\n  /**\n   * @return {?}\n   */\n  infiniteNextImg() {\n    this.effectStyle = `all ${this.speed}s ease-in-out`;\n    this.leftPos = -2 * this.sliderImageSizeWithPadding * this.slideImageCount;\n    setTimeout(\n    /**\n    * @return {?}\n    */\n    () => {\n      this.effectStyle = 'none';\n      for (let i = 0; i < this.slideImageCount; i++) {\n        this.imageObj.push(this.imageObj[this.slideImageCount]);\n        this.imageObj.shift();\n      }\n      this.leftPos = -1 * this.sliderImageSizeWithPadding * this.slideImageCount;\n    }, this.speed * 1000);\n  }\n  /**\n   * @return {?}\n   */\n  getVisiableIndex() {\n    /** @type {?} */\n    const currentIndex = Math.round((Math.abs(this.leftPos) + this.sliderImageWidth) / this.sliderImageWidth);\n    if (this.imageObj[currentIndex - 1] && this.imageObj[currentIndex - 1]['index'] !== undefined) {\n      this.visiableImageIndex = this.imageObj[currentIndex - 1]['index'];\n    }\n  }\n  /**\n   * Disable slider left/right arrow when image moving\n   * @param {?} msg\n   * @return {?}\n   */\n  sliderArrowDisableTeam(msg) {\n    this.sliderNextDisable = true;\n    this.sliderPrevDisable = true;\n    setTimeout(\n    /**\n    * @return {?}\n    */\n    () => {\n      this.nextPrevSliderButtonDisable(msg);\n    }, this.speed * 1000);\n  }\n  /**\n   * @param {?=} msg\n   * @return {?}\n   */\n  nextPrevSliderButtonDisable(msg) {\n    this.sliderNextDisable = false;\n    this.sliderPrevDisable = false;\n    /** @type {?} */\n    const actionMsg = {};\n    if (!this.infinite) {\n      if (this.imageParentDivWidth + this.leftPos <= this.sliderMainDivWidth) {\n        this.sliderNextDisable = true;\n      }\n      if (this.leftPos >= 0) {\n        this.sliderPrevDisable = true;\n      }\n      actionMsg['prevDisable'] = this.sliderPrevDisable;\n      actionMsg['nextDisable'] = this.sliderNextDisable;\n    }\n    if (msg) {\n      this.arrowClick.emit(Object.assign({\n        action: msg\n      }, actionMsg));\n    }\n  }\n  // for lightbox\n  /**\n   * @return {?}\n   */\n  showLightbox() {\n    if (this.imageObj.length) {\n      this.imageMouseEnterHandler();\n      this.ligthboxShow = true;\n      this.elRef.nativeElement.ownerDocument.body.style.overflow = 'hidden';\n    }\n  }\n  /**\n   * @return {?}\n   */\n  close() {\n    this.ligthboxShow = false;\n    this.elRef.nativeElement.ownerDocument.body.style.overflow = '';\n    this.lightboxClose.emit();\n    this.imageAutoSlide();\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  lightboxArrowClickHandler(event) {\n    this.lightboxArrowClick.emit(event);\n  }\n  /**\n   * Swipe event handler\n   * Reference from https://stackoverflow.com/a/44511007/2067646\n   * @param {?} e\n   * @param {?} when\n   * @return {?}\n   */\n  swipe(e, when) {\n    /** @type {?} */\n    const coord = [e.changedTouches[0].pageX, e.changedTouches[0].pageY];\n    /** @type {?} */\n    const time = new Date().getTime();\n    if (when === 'start') {\n      this.swipeCoord = coord;\n      this.swipeTime = time;\n    } else if (when === 'end') {\n      /** @type {?} */\n      const direction = [coord[0] - this.swipeCoord[0], coord[1] - this.swipeCoord[1]];\n      /** @type {?} */\n      const duration = time - this.swipeTime;\n      if (duration < 1000 //\n      && Math.abs(direction[0]) > 30 // Long enough\n      && Math.abs(direction[0]) > Math.abs(direction[1] * 3)) {\n        // Horizontal enough\n        if (direction[0] < 0) {\n          this.next();\n        } else {\n          this.prev();\n        }\n      }\n    }\n  }\n}\n\n/** @nocollapse */\n\nif (false) {\n  /** @type {?} */\n  NgImageSliderComponent.prototype.sliderMainDivWidth;\n  /** @type {?} */\n  NgImageSliderComponent.prototype.imageParentDivWidth;\n  /** @type {?} */\n  NgImageSliderComponent.prototype.imageObj;\n  /** @type {?} */\n  NgImageSliderComponent.prototype.ligthboxImageObj;\n  /** @type {?} */\n  NgImageSliderComponent.prototype.totalImages;\n  /** @type {?} */\n  NgImageSliderComponent.prototype.leftPos;\n  /** @type {?} */\n  NgImageSliderComponent.prototype.effectStyle;\n  /** @type {?} */\n  NgImageSliderComponent.prototype.speed;\n  /** @type {?} */\n  NgImageSliderComponent.prototype.sliderPrevDisable;\n  /** @type {?} */\n  NgImageSliderComponent.prototype.sliderNextDisable;\n  /** @type {?} */\n  NgImageSliderComponent.prototype.slideImageCount;\n  /** @type {?} */\n  NgImageSliderComponent.prototype.sliderImageWidth;\n  /** @type {?} */\n  NgImageSliderComponent.prototype.sliderImageReceivedWidth;\n  /** @type {?} */\n  NgImageSliderComponent.prototype.sliderImageHeight;\n  /** @type {?} */\n  NgImageSliderComponent.prototype.sliderImageReceivedHeight;\n  /** @type {?} */\n  NgImageSliderComponent.prototype.sliderImageSizeWithPadding;\n  /** @type {?} */\n  NgImageSliderComponent.prototype.autoSlideCount;\n  /** @type {?} */\n  NgImageSliderComponent.prototype.stopSlideOnHover;\n  /** @type {?} */\n  NgImageSliderComponent.prototype.autoSlideInterval;\n  /** @type {?} */\n  NgImageSliderComponent.prototype.showArrowButton;\n  /** @type {?} */\n  NgImageSliderComponent.prototype.textDirection;\n  /** @type {?} */\n  NgImageSliderComponent.prototype.imageMargin;\n  /** @type {?} */\n  NgImageSliderComponent.prototype.sliderOrderType;\n  /**\n   * @type {?}\n   * @private\n   */\n  NgImageSliderComponent.prototype.swipeCoord;\n  /**\n   * @type {?}\n   * @private\n   */\n  NgImageSliderComponent.prototype.swipeTime;\n  /** @type {?} */\n  NgImageSliderComponent.prototype.ligthboxShow;\n  /** @type {?} */\n  NgImageSliderComponent.prototype.activeImageIndex;\n  /** @type {?} */\n  NgImageSliderComponent.prototype.visiableImageIndex;\n  /** @type {?} */\n  NgImageSliderComponent.prototype.sliderMain;\n  /** @type {?} */\n  NgImageSliderComponent.prototype.imageDiv;\n  /** @type {?} */\n  NgImageSliderComponent.prototype.infinite;\n  /** @type {?} */\n  NgImageSliderComponent.prototype.imagePopup;\n  /** @type {?} */\n  NgImageSliderComponent.prototype.images;\n  /** @type {?} */\n  NgImageSliderComponent.prototype.videoAutoPlay;\n  /** @type {?} */\n  NgImageSliderComponent.prototype.paginationShow;\n  /** @type {?} */\n  NgImageSliderComponent.prototype.arrowKeyMove;\n  /** @type {?} */\n  NgImageSliderComponent.prototype.manageImageRatio;\n  /** @type {?} */\n  NgImageSliderComponent.prototype.showVideoControls;\n  /** @type {?} */\n  NgImageSliderComponent.prototype.lazyLoading;\n  /** @type {?} */\n  NgImageSliderComponent.prototype.imageClick;\n  /** @type {?} */\n  NgImageSliderComponent.prototype.arrowClick;\n  /** @type {?} */\n  NgImageSliderComponent.prototype.lightboxArrowClick;\n  /** @type {?} */\n  NgImageSliderComponent.prototype.lightboxClose;\n  /**\n   * @type {?}\n   * @private\n   */\n  NgImageSliderComponent.prototype.cdRef;\n  /**\n   * @type {?}\n   * @private\n   */\n  NgImageSliderComponent.prototype.platformId;\n  /** @type {?} */\n  NgImageSliderComponent.prototype.imageSliderService;\n  /**\n   * @type {?}\n   * @private\n   */\n  NgImageSliderComponent.prototype.elRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/slider-custom-image/slider-custom-image.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst youtubeRegExp = /^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|\\&v=|\\?v=)([^#\\&\\?]*).*/;\n/** @type {?} */\nconst validFileExtensions = ['jpeg', 'jpg', 'gif', 'png'];\n/** @type {?} */\nconst validVideoExtensions = ['mp4'];\nclass SliderCustomImageComponent {\n  /**\n   * @param {?} imageSliderService\n   * @param {?} sanitizer\n   * @param {?} document\n   */\n  constructor(imageSliderService, sanitizer, document) {\n    this.imageSliderService = imageSliderService;\n    this.sanitizer = sanitizer;\n    this.YOUTUBE = 'youtube';\n    this.IMAGE = 'image';\n    this.VIDEO = 'video';\n    this.fileUrl = '';\n    this.fileExtension = '';\n    this.type = this.IMAGE;\n    this.imageLoading = true;\n    // @inputs\n    this.showVideo = false;\n    this.videoAutoPlay = false;\n    this.showVideoControls = 1;\n    this.speed = 1;\n    this.isVideo = false;\n    this.alt = '';\n    this.title = '';\n    this.direction = 'ltr';\n    this.ratio = false;\n    this.lazy = false;\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n  ngOnChanges(changes) {\n    if (this.imageUrl && this.imageUrl && this.imageUrl && typeof this.imageUrl === 'string' && (changes.imageUrl && changes.imageUrl.firstChange || this.videoAutoPlay)) {\n      this.setUrl();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  setUrl() {\n    /** @type {?} */\n    const url = this.imageUrl;\n    this.imageLoading = true;\n    this.fileUrl = this.sanitizer.bypassSecurityTrustResourceUrl(url);\n    this.fileExtension = url.split('.').pop().split(/\\#|\\?/)[0];\n    if (this.imageSliderService.base64FileExtension(url) && (validFileExtensions.indexOf(this.imageSliderService.base64FileExtension(url).toLowerCase()) > -1 || validVideoExtensions.indexOf(this.imageSliderService.base64FileExtension(url).toLowerCase()) > -1)) {\n      this.fileExtension = this.imageSliderService.base64FileExtension(url);\n    }\n    // verify for youtube url\n    /** @type {?} */\n    const match = url.match(youtubeRegExp);\n    if (match && match[2].length === 11) {\n      if (this.showVideo) {\n        this.type = this.YOUTUBE;\n        this.fileUrl = this.sanitizer.bypassSecurityTrustResourceUrl(`${'https://www.youtube.com/embed/'}${match[2]}${this.videoAutoPlay ? '?autoplay=1&enablejsapi=1' : '?autoplay=0&enablejsapi=1'}${'&controls='}${this.showVideoControls}`);\n      } else {\n        this.type = this.IMAGE;\n        this.fileUrl = this.sanitizer.bypassSecurityTrustResourceUrl(`https://img.youtube.com/vi/${match[2]}/0.jpg`);\n      }\n    } else if (this.fileExtension && validFileExtensions.indexOf(this.fileExtension.toLowerCase()) > -1) {\n      this.type = this.IMAGE;\n    } else if (this.fileExtension && validVideoExtensions.indexOf(this.fileExtension.toLowerCase()) > -1) {\n      this.type = this.VIDEO;\n      if (this.videoAutoPlay && document.getElementById(`video_${this.imageIndex}`)) {\n        /** @type {?} */\n        const videoObj = document.getElementById(`video_${this.imageIndex}`);\n        setTimeout(\n        /**\n        * @return {?}\n        */\n        () => {\n          videoObj.play();\n        }, this.speed * 1000);\n      }\n    }\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  videoClickHandler(event) {\n    if (event && event.srcElement && !this.showVideoControls) {\n      if (event.srcElement.paused) {\n        event.srcElement.play();\n      } else {\n        event.srcElement.pause();\n      }\n    }\n  }\n}\n\n/** @nocollapse */\n\nif (false) {\n  /** @type {?} */\n  SliderCustomImageComponent.prototype.YOUTUBE;\n  /** @type {?} */\n  SliderCustomImageComponent.prototype.IMAGE;\n  /** @type {?} */\n  SliderCustomImageComponent.prototype.VIDEO;\n  /** @type {?} */\n  SliderCustomImageComponent.prototype.fileUrl;\n  /** @type {?} */\n  SliderCustomImageComponent.prototype.fileExtension;\n  /** @type {?} */\n  SliderCustomImageComponent.prototype.type;\n  /** @type {?} */\n  SliderCustomImageComponent.prototype.imageLoading;\n  /** @type {?} */\n  SliderCustomImageComponent.prototype.showVideo;\n  /** @type {?} */\n  SliderCustomImageComponent.prototype.videoAutoPlay;\n  /** @type {?} */\n  SliderCustomImageComponent.prototype.showVideoControls;\n  /** @type {?} */\n  SliderCustomImageComponent.prototype.currentImageIndex;\n  /** @type {?} */\n  SliderCustomImageComponent.prototype.imageIndex;\n  /** @type {?} */\n  SliderCustomImageComponent.prototype.speed;\n  /** @type {?} */\n  SliderCustomImageComponent.prototype.imageUrl;\n  /** @type {?} */\n  SliderCustomImageComponent.prototype.isVideo;\n  /** @type {?} */\n  SliderCustomImageComponent.prototype.alt;\n  /** @type {?} */\n  SliderCustomImageComponent.prototype.title;\n  /** @type {?} */\n  SliderCustomImageComponent.prototype.direction;\n  /** @type {?} */\n  SliderCustomImageComponent.prototype.ratio;\n  /** @type {?} */\n  SliderCustomImageComponent.prototype.lazy;\n  /** @type {?} */\n  SliderCustomImageComponent.prototype.imageSliderService;\n  /**\n   * @type {?}\n   * @private\n   */\n  SliderCustomImageComponent.prototype.sanitizer;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/slider-lightbox/slider-lightbox.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst LIGHTBOX_NEXT_ARROW_CLICK_MESSAGE = 'lightbox next';\n/** @type {?} */\nconst LIGHTBOX_PREV_ARROW_CLICK_MESSAGE = 'lightbox previous';\nclass SliderLightboxComponent {\n  /**\n   * @param {?} cdRef\n   * @param {?} sanitizer\n   * @param {?} elRef\n   * @param {?} document\n   */\n  constructor(cdRef, sanitizer, elRef, document) {\n    this.cdRef = cdRef;\n    this.sanitizer = sanitizer;\n    this.elRef = elRef;\n    this.document = document;\n    this.totalImages = 0;\n    this.nextImageIndex = -1;\n    this.popupWidth = 1200;\n    this.marginLeft = 0;\n    this.imageFullscreenView = false;\n    this.lightboxPrevDisable = false;\n    this.lightboxNextDisable = false;\n    this.showLoading = true;\n    this.effectStyle = 'none';\n    this.speed = 1; // default speed in second\n    // default speed in second\n    this.title = '';\n    this.currentImageIndex = 0;\n    // @Inputs\n    this.images = [];\n    this.videoAutoPlay = false;\n    this.direction = 'ltr';\n    this.paginationShow = false;\n    this.infinite = false;\n    this.arrowKeyMove = true;\n    this.showVideoControls = true;\n    // @Output\n    this.close = new EventEmitter();\n    this.prevImage = new EventEmitter();\n    this.nextImage = new EventEmitter();\n  }\n  /**\n   * @param {?} index\n   * @return {?}\n   */\n  set imageIndex(index) {\n    if (index !== undefined && index > -1 && index < this.images.length) {\n      this.currentImageIndex = index;\n    }\n    this.nextPrevDisable();\n  }\n  /**\n   * @param {?} visiableFlag\n   * @return {?}\n   */\n  set show(visiableFlag) {\n    this.imageFullscreenView = visiableFlag;\n    this.elRef.nativeElement.ownerDocument.body.style.overflow = '';\n    if (visiableFlag === true) {\n      this.elRef.nativeElement.ownerDocument.body.style.overflow = 'hidden';\n      // this.getImageData();\n      this.setPopupSliderWidth();\n    }\n  }\n  /**\n   * @param {?} data\n   * @return {?}\n   */\n  set animationSpeed(data) {\n    if (data && typeof data === 'number' && data >= 0.1 && data <= 5) {\n      this.speed = data;\n    }\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  onResize(event) {\n    this.effectStyle = 'none';\n    this.setPopupSliderWidth();\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  handleKeyboardEvent(event) {\n    if (event && event.key && this.arrowKeyMove) {\n      if (event.key.toLowerCase() === 'arrowright') {\n        this.nextImageLightbox();\n      }\n      if (event.key.toLowerCase() === 'arrowleft') {\n        this.prevImageLightbox();\n      }\n      if (event.key.toLowerCase() === 'escape') {\n        this.closeLightbox();\n      }\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {}\n  /**\n   * @return {?}\n   */\n  ngAfterViewInit() {}\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this.resetState();\n  }\n  /**\n   * @return {?}\n   */\n  setPopupSliderWidth() {\n    if (window && window.innerWidth) {\n      this.popupWidth = window.innerWidth;\n      this.totalImages = this.images.length;\n      if (typeof this.currentImageIndex === 'number' && this.currentImageIndex !== undefined) {\n        this.marginLeft = -1 * this.popupWidth * this.currentImageIndex;\n        this.getImageData();\n        this.nextPrevDisable();\n        setTimeout(\n        /**\n        * @return {?}\n        */\n        () => {\n          this.showLoading = false;\n        }, 500);\n      }\n    }\n  }\n  /**\n   * @return {?}\n   */\n  closeLightbox() {\n    this.close.emit();\n  }\n  /**\n   * @return {?}\n   */\n  prevImageLightbox() {\n    this.effectStyle = `all ${this.speed}s ease-in-out`;\n    if (this.currentImageIndex > 0 && !this.lightboxPrevDisable) {\n      this.currentImageIndex--;\n      this.prevImage.emit(LIGHTBOX_PREV_ARROW_CLICK_MESSAGE);\n      this.marginLeft = -1 * this.popupWidth * this.currentImageIndex;\n      this.getImageData();\n      this.nextPrevDisable();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  nextImageLightbox() {\n    this.effectStyle = `all ${this.speed}s ease-in-out`;\n    if (this.currentImageIndex < this.images.length - 1 && !this.lightboxNextDisable) {\n      this.currentImageIndex++;\n      this.nextImage.emit(LIGHTBOX_NEXT_ARROW_CLICK_MESSAGE);\n      this.marginLeft = -1 * this.popupWidth * this.currentImageIndex;\n      this.getImageData();\n      this.nextPrevDisable();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  nextPrevDisable() {\n    this.lightboxNextDisable = true;\n    this.lightboxPrevDisable = true;\n    setTimeout(\n    /**\n    * @return {?}\n    */\n    () => {\n      this.applyButtonDisableCondition();\n    }, this.speed * 1000);\n  }\n  /**\n   * @return {?}\n   */\n  applyButtonDisableCondition() {\n    this.lightboxNextDisable = false;\n    this.lightboxPrevDisable = false;\n    if (!this.infinite && this.currentImageIndex >= this.images.length - 1) {\n      this.lightboxNextDisable = true;\n    }\n    if (!this.infinite && this.currentImageIndex <= 0) {\n      this.lightboxPrevDisable = true;\n    }\n  }\n  /**\n   * @return {?}\n   */\n  getImageData() {\n    if (this.images && this.images.length && typeof this.currentImageIndex === 'number' && this.currentImageIndex !== undefined && this.images[this.currentImageIndex] && (this.images[this.currentImageIndex]['image'] || this.images[this.currentImageIndex]['video'])) {\n      this.title = this.images[this.currentImageIndex]['title'] || '';\n      this.totalImages = this.images.length;\n      for (const iframeI in this.document.getElementsByTagName('iframe')) {\n        if (this.document.getElementsByTagName('iframe')[iframeI] && this.document.getElementsByTagName('iframe')[iframeI].contentWindow && this.document.getElementsByTagName('iframe')[iframeI].contentWindow.postMessage) {\n          this.document.getElementsByTagName('iframe')[iframeI].contentWindow.postMessage('{\"event\":\"command\",\"func\":\"pauseVideo\",\"args\":\"\"}', '*');\n        }\n      }\n      for (const videoI in this.document.getElementsByTagName('video')) {\n        if (this.document.getElementsByTagName('video')[videoI] && this.document.getElementsByTagName('video')[videoI].pause) {\n          this.document.getElementsByTagName('video')[videoI].pause();\n        }\n      }\n    }\n  }\n  /**\n   * @return {?}\n   */\n  resetState() {\n    this.images = [];\n  }\n  /**\n   * Swipe event handler\n   * Reference from https://stackoverflow.com/a/44511007/2067646\n   * @param {?} e\n   * @param {?} when\n   * @return {?}\n   */\n  swipeLightboxImg(e, when) {\n    /** @type {?} */\n    const coord = [e.changedTouches[0].pageX, e.changedTouches[0].pageY];\n    /** @type {?} */\n    const time = new Date().getTime();\n    if (when === 'start') {\n      this.swipeLightboxImgCoord = coord;\n      this.swipeLightboxImgTime = time;\n    } else if (when === 'end') {\n      /** @type {?} */\n      const direction = [coord[0] - this.swipeLightboxImgCoord[0], coord[1] - this.swipeLightboxImgCoord[1]];\n      /** @type {?} */\n      const duration = time - this.swipeLightboxImgTime;\n      if (duration < 1000 //\n      && Math.abs(direction[0]) > 30 // Long enough\n      && Math.abs(direction[0]) > Math.abs(direction[1] * 3)) {\n        // Horizontal enough\n        if (direction[0] < 0) {\n          this.nextImageLightbox();\n        } else {\n          this.prevImageLightbox();\n        }\n      }\n    }\n  }\n}\n\n/** @nocollapse */\n\nif (false) {\n  /** @type {?} */\n  SliderLightboxComponent.prototype.totalImages;\n  /** @type {?} */\n  SliderLightboxComponent.prototype.nextImageIndex;\n  /** @type {?} */\n  SliderLightboxComponent.prototype.popupWidth;\n  /** @type {?} */\n  SliderLightboxComponent.prototype.marginLeft;\n  /** @type {?} */\n  SliderLightboxComponent.prototype.imageFullscreenView;\n  /** @type {?} */\n  SliderLightboxComponent.prototype.lightboxPrevDisable;\n  /** @type {?} */\n  SliderLightboxComponent.prototype.lightboxNextDisable;\n  /** @type {?} */\n  SliderLightboxComponent.prototype.showLoading;\n  /** @type {?} */\n  SliderLightboxComponent.prototype.effectStyle;\n  /** @type {?} */\n  SliderLightboxComponent.prototype.speed;\n  /** @type {?} */\n  SliderLightboxComponent.prototype.title;\n  /** @type {?} */\n  SliderLightboxComponent.prototype.currentImageIndex;\n  /**\n   * @type {?}\n   * @private\n   */\n  SliderLightboxComponent.prototype.swipeLightboxImgCoord;\n  /**\n   * @type {?}\n   * @private\n   */\n  SliderLightboxComponent.prototype.swipeLightboxImgTime;\n  /** @type {?} */\n  SliderLightboxComponent.prototype.lightboxDiv;\n  /** @type {?} */\n  SliderLightboxComponent.prototype.lightboxImageDiv;\n  /** @type {?} */\n  SliderLightboxComponent.prototype.images;\n  /** @type {?} */\n  SliderLightboxComponent.prototype.videoAutoPlay;\n  /** @type {?} */\n  SliderLightboxComponent.prototype.direction;\n  /** @type {?} */\n  SliderLightboxComponent.prototype.paginationShow;\n  /** @type {?} */\n  SliderLightboxComponent.prototype.infinite;\n  /** @type {?} */\n  SliderLightboxComponent.prototype.arrowKeyMove;\n  /** @type {?} */\n  SliderLightboxComponent.prototype.showVideoControls;\n  /** @type {?} */\n  SliderLightboxComponent.prototype.close;\n  /** @type {?} */\n  SliderLightboxComponent.prototype.prevImage;\n  /** @type {?} */\n  SliderLightboxComponent.prototype.nextImage;\n  /**\n   * @type {?}\n   * @private\n   */\n  SliderLightboxComponent.prototype.cdRef;\n  /**\n   * @type {?}\n   * @private\n   */\n  SliderLightboxComponent.prototype.sanitizer;\n  /**\n   * @type {?}\n   * @private\n   */\n  SliderLightboxComponent.prototype.elRef;\n  /**\n   * @type {?}\n   * @private\n   */\n  SliderLightboxComponent.prototype.document;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/ng-image-slider.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NgImageSliderModule {}\n/**\n * @fileoverview added by tsickle\n * Generated from: public_api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * Generated from: ng-image-slider.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nexport { NgImageSliderComponent, NgImageSliderModule, NgImageSliderService, SliderCustomImageComponent as ɵa, SliderLightboxComponent as ɵb };\n//# sourceMappingURL=ng-image-slider.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}